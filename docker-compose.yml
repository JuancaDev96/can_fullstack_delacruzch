version: '3.8'

services:
  api_scraper:
    build: ./ApiScrap.Scraping
    ports:
      - "9020:8000"
    volumes:
      - ./ApiScrap.Scraping/data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/scraperdb
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  redis:
    image: redis:6-alpine
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "9050:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mynetwork

  worker:
    build: ./ApiScrap.Scraping
    command: celery -A scraper_api.celery_app worker --loglevel=info
    volumes:
      - ./ApiScrap.Scraping/data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api_scraper:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/scraperdb
    networks:
      - mynetwork

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scraperdb
    ports:
      - "9040:5432"
    volumes:
      - ./ApiScrap.Scraping/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

  apigateway:
    build: 
      context: ./ApiGateway.Scraping
      dockerfile: Dockerfile
    ports:
      - "9010:8080"
    depends_on:
      api_scraper:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mynetwork

  apinotifier:
    build: 
      context: ./ApiGateway.Scraping
      dockerfile: DockerfileApi
    ports:
      - "9030:8080"
    networks:
      - mynetwork

  frontend:
    build:
      context: ./Frontend.Scraping
      dockerfile: Dockerfile
    ports:
      - "9999:4000"
    networks:
      - mynetwork


networks:
  mynetwork:
    driver: bridge